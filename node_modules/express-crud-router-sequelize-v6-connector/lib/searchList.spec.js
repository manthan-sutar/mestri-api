"use strict";

var _sequelize = require("sequelize");

var _searchList = require("./searchList");

describe('crud', () => {
  const sequelize = new _sequelize.Sequelize('sqlite::memory:');
  const IdModel = sequelize.define('IdModel', {
    // Model attributes are defined here
    id: {
      type: _sequelize.DataTypes.NUMBER,
      allowNull: false,
      primaryKey: true
    },
    field1: {
      type: _sequelize.DataTypes.STRING
    },
    field2: {
      type: _sequelize.DataTypes.STRING
    }
  }, {
    modelName: 'IdModel'
  });
  const UuidModel = sequelize.define('UuidModel', {
    // Model attributes are defined here
    id: {
      type: _sequelize.DataTypes.UUID,
      allowNull: false,
      primaryKey: true
    },
    title: {
      type: _sequelize.DataTypes.STRING
    }
  }, {
    modelName: 'UuidModel'
  });
  it('handle autocomplete query', () => {
    expect((0, _searchList.prepareQueries)(IdModel, ['field1', 'field2'])('some mustach')).toEqual([{
      [_sequelize.Op.or]: [{
        field1: {
          [_sequelize.Op.iLike]: '%some mustach%'
        }
      }, {
        field2: {
          [_sequelize.Op.iLike]: '%some mustach%'
        }
      }]
    }, {
      [_sequelize.Op.and]: [{
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.iLike]: '%some%'
          }
        }, {
          field2: {
            [_sequelize.Op.iLike]: '%some%'
          }
        }]
      }, {
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.iLike]: '%mustach%'
          }
        }, {
          field2: {
            [_sequelize.Op.iLike]: '%mustach%'
          }
        }]
      }]
    }, {
      [_sequelize.Op.or]: [{
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.iLike]: '%some%'
          }
        }, {
          field2: {
            [_sequelize.Op.iLike]: '%some%'
          }
        }]
      }, {
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.iLike]: '%mustach%'
          }
        }, {
          field2: {
            [_sequelize.Op.iLike]: '%mustach%'
          }
        }]
      }]
    }]);
  });
  it('supports alternate comparators', () => {
    expect((0, _searchList.prepareQueries)(IdModel, ['field1'])('some mustach', _sequelize.Op.like)).toEqual([{
      [_sequelize.Op.or]: [{
        field1: {
          [_sequelize.Op.like]: '%some mustach%'
        }
      }]
    }, {
      [_sequelize.Op.and]: [{
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.like]: '%some%'
          }
        }]
      }, {
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.like]: '%mustach%'
          }
        }]
      }]
    }, {
      [_sequelize.Op.or]: [{
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.like]: '%some%'
          }
        }]
      }, {
        [_sequelize.Op.or]: [{
          field1: {
            [_sequelize.Op.like]: '%mustach%'
          }
        }]
      }]
    }]);
  });
  it('does only one lookup for single tokens', () => {
    expect((0, _searchList.prepareQueries)(IdModel, ['field1'])('mustach')).toEqual([{
      [_sequelize.Op.or]: [{
        field1: {
          [_sequelize.Op.iLike]: '%mustach%'
        }
      }]
    }]);
  });
  it('adopts query for uuid fields', () => {
    expect((0, _searchList.prepareQueries)(UuidModel, ['id'])('123-123')).toEqual([{
      [_sequelize.Op.or]: [{
        id: {
          [_sequelize.Op.eq]: '123-123'
        }
      }]
    }]);
    expect((0, _searchList.prepareQueries)(UuidModel, ['id', 'title'])('123-123')).toEqual([{
      [_sequelize.Op.or]: [{
        id: {
          [_sequelize.Op.eq]: '123-123'
        }
      }, {
        title: {
          [_sequelize.Op.iLike]: '%123-123%'
        }
      }]
    }]);
  });
});