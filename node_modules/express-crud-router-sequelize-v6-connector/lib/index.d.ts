import { Model, ModelStatic } from 'sequelize';
interface Actions<Attributes extends {
    id: string | number;
}, CreationAttributes extends {} = Attributes> {
    getOne: (identifier: Attributes['id']) => Promise<Model<Attributes, CreationAttributes> | null>;
    create: (body: CreationAttributes) => Promise<Model<Attributes, CreationAttributes>>;
    destroy: (id: Attributes['id']) => Promise<{
        id: Attributes['id'];
    }>;
    update: (id: Attributes['id'], data: Partial<Attributes>) => Promise<Model<Attributes, CreationAttributes>>;
    getList: (conf: {
        filter: Record<string, any>;
        limit: number;
        offset: number;
        order: Array<[string, string]>;
    }) => Promise<{
        rows: Model<Attributes, CreationAttributes>[];
        count: number;
    }>;
}
declare const sequelizeCrud: <Attributes extends {
    id: string | number;
}, CreationAttributes extends {} = Attributes>(model: ModelStatic<Model<Attributes, CreationAttributes>>) => Actions<Attributes, CreationAttributes>;
export default sequelizeCrud;
